// This file contains a set of auxillary drivers. They are usefull/necessary
// in some cases where the marker protocol doesn't provide enough information
// to specify all degrees of freedom. Hence, these drivers complement a
// specific driver protocol. Many of these drivers are soft, and an only serve
// to stabalize the solver in postures where the markers doesn't provide unique
// kinematic solution. 


#define _CLAVICULA_AXIAL_ROTATION_LOCK
#define _GLENOHUMERAL_EXTERNALROTATION_DRIVER
#define _WRIST_ABDUCTION_DRIVER
#define _WRIST_FLEXION_DRIVER
#define _SUBTALER_EVERSION_DRIVER



AnyFolder ExtraDrivers = {

AnyFolder &JntPos= Main.HumanModel.Mannequin.Posture;  
AnyFolder &JntVel= Main.HumanModel.Mannequin.PostureVel;
AnyFolder &InterfaceRef = Main.HumanModel.BodyModel.Interface;

#ifdef _CLAVICULA_AXIAL_ROTATION_LOCK
AnyKinEqSimpleDriver SCDriverLeft ={
  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Left.SternoClavicularAxialRotation;
  DriverPos = pi/180*{
    .JntPos.Left.SternoClavicularAxialRotation
  };
  DriverVel = pi/180*{
    .JntVel.Left.SternoClavicularAxialRotation
  };
  Reaction.Type={Off};
};

AnyKinEqSimpleDriver SCDriverRight ={
  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Right.SternoClavicularAxialRotation;
  DriverPos = pi/180*{
    .JntPos.Right.SternoClavicularAxialRotation
  };
  DriverVel = {
    .JntVel.Right.SternoClavicularAxialRotation
  };
  Reaction.Type={Off};
};
#endif

#ifdef _GLENOHUMERAL_EXTERNALROTATION_DRIVER
AnyKinEqSimpleDriver GlenohumeralExternalRotationRight ={
  AnyKinMeasureOrg &ref3 = .InterfaceRef.Right.GlenohumeralExternalRotation;
  DriverPos = pi/180*{
    .JntPos.Right.GlenohumeralExternalRotation
  };
  DriverVel = {
    .JntVel.Right.GlenohumeralExternalRotation
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver GlenohumeralExternalRotationLeft={
  AnyKinMeasureOrg &ref3 = .InterfaceRef.Left.GlenohumeralExternalRotation;
  DriverPos = pi/180*{
    .JntPos.Left.GlenohumeralExternalRotation
  };
  DriverVel = {
    .JntVel.Left.GlenohumeralExternalRotation
  };
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
  };
#endif


  

#ifdef _SUBTALER_EVERSION_DRIVER
AnyKinEqSimpleDriver RightEversionBrace={
  AnyKinMeasureOrg &ref1= .InterfaceRef.Right.SubTalarEversion; 
  DriverPos= pi/180*{
    .JntPos.Right.SubTalarEversion 
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver LefEversionBrace={
  AnyKinMeasureOrg &ref1= .InterfaceRef.Left.SubTalarEversion; 
  DriverPos=pi/180*{ 
    .JntPos.Left.SubTalarEversion 
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun};
};
#endif


#ifdef _WRIST_ABDUCTION_DRIVER
AnyKinEqSimpleDriver WristAbductionRight ={
  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Right.WristAbduction;
  DriverPos = pi/180*{.JntPos.Right.WristAbduction };
  DriverVel = { .JntVel.Right.WristAbduction };
  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1}; }; };
//  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver WristAbductionLeft ={
  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Left.WristAbduction;
  DriverPos = pi/180*{ .JntPos.Left.WristAbduction };
  DriverVel = { .JntVel.Left.WristAbduction };
  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1}; }; };
//  WeightFun = {&Weight.fun};
};  
#endif

#ifdef _WRIST_FLEXION_DRIVER
AnyKinEqSimpleDriver WristFlexionRight ={
  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Right.WristFlexion;
  DriverPos = pi/180*{.JntPos.Right.WristFlexion};
  DriverVel = { .JntVel.Right.WristFlexion};
  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1}; }; };
//  WeightFun = {&Weight.fun};
};

AnyKinEqSimpleDriver WristFlexionLeft ={
  AnyKinMeasureOrg &ref3 = Main.HumanModel.BodyModel.Interface.Left.WristFlexion;
  DriverPos = pi/180*{ .JntPos.Left.WristFlexion};
  DriverVel = { .JntVel.Left.WristFlexion};
  Reaction.Type={Off};
//  CType = {Soft};
//  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1}; }; };
//  WeightFun = {&Weight.fun};
};  
#endif


  
#undef _CLAVICULA_AXIAL_ROTATION_LOCK
#undef _GLENOHUMERAL_EXTERNALROTATION_DRIVER
#undef _WRIST_ABDUCTION_DRIVER
#undef _SUBTALER_EVERSION_DRIVER 
};