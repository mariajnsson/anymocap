#define __CREATE_CONTACT_CLASS__(IDX) ConditionalContactDistanceAndVelocityDepClass Contact##IDX ( BaseObject = .PlateBaseFrame ,  TargetObject = .NodesBaseFrame.Node##IDX ) =   {    NormalDirection = .NormalDir;    FrictionDirection1 = .FrictionDir1;    FrictionDirection2 = .FrictionDir2; };
  

#class_template FootPlateConditionalContact2 (
STUDY = InverseDynamicStudy,
NORMAL_DIRECTION = "Z",
NUMBER_OF_NODES = 25,
NODES_BASE_FRAME = DEFAULT_DOESNT_WORK_YET,
PLATE_BASE_FRAME = DEFAULT_DOESNT_WORK_YET,
SHOW_TRIGGER_VOLUMEN = 0 )
{
  
  AnyFolder &NodesBaseFrame = NODES_BASE_FRAME ;
  AnyFolder &PlateBaseFrame = PLATE_BASE_FRAME ;

  
  AnyFolder Settings = {
    #var AnyVar LimitDistLow = -0.10;
    #var AnyVar LimitDistHigh = 0.04;
    #var AnyVar LimitVelHigh = 0.8;
    #var AnyVar Radius = 10;
    #var AnyVar Strength = 0.4*Main.HumanModel.BodyModel.TotalBodyMass*vnorm(Main.Studies.InverseDynamicStudy.Gravity);
    #var AnyVar FrictionCoefficient = 0.5;
    #var AnyVar ScaleFactor = 1;
    #var AnyIntArray Direction = {1,0,2};
    
//    #define ForcePlateDirectionNormal Z 
//    #define NormalDirectionParStringIn "Z"
//    
//    #define ForcePlateDirectionFriction1 X 
//    #define ForcePlateDirectionFriction2 Y
        
    #var AnyVar ForceVectorDrawScaleFactor = 0.0005;
    
  
  };
  
    #if NORMAL_DIRECTION == "Z"
    #var AnyInt NormalDir = 2;
    #var AnyInt FrictionDir1 = 0;
    #var AnyInt FrictionDir2 = 1;
    #endif
    
    #if NORMAL_DIRECTION == "Y"
    #var AnyInt NormalDir = 1;
    #var AnyInt FrictionDir1 = 0;
    #var AnyInt FrictionDir2 = 2;
    #endif
    
    #if NORMAL_DIRECTION == "X"
    #var AnyInt NormalDir = 0;
    #var AnyInt FrictionDir1 = 1;
    #var AnyInt FrictionDir2 = 2;
    #endif  
  
    #if NORMAL_DIRECTION != "X" & NORMAL_DIRECTION != "Y" & NORMAL_DIRECTION != "Z"
    // Create a sensible error  
    #endif
    
   
//  __CREATE_CONTACT_CLASS__(0, BaseObjectPara ) 

#if 0 < NUMBER_OF_NODES
  #if SHOW_TRIGGER_VOLUMEN == 1
    // Create the first node with DisplayTriggerVolume enabled
    ConditionalContactDistanceAndVelocityDepClass Contact0 (
    BaseObject = .PlateBaseFrame ,
    TargetObject = .NodesBaseFrame.Node0,
    DisplayTriggerVolume = 1) = 
    {
      NormalDirection = .NormalDir;
      FrictionDirection1 = .FrictionDir1;
      FrictionDirection2 = .FrictionDir2;
   };
  #else
    __CREATE_CONTACT_CLASS__(0)
  #endif
#endif  

#if    1 < NUMBER_OF_NODES
          __CREATE_CONTACT_CLASS__(1)
#endif

  //-->Code for calculating COP
  #include "FootPlateConditionalContact_ForceMomentMeasure_Auto.any"
  
//  #include "FootPlateConditionalContact_ForceMomentMeasure_Manual.any"
//  
//  
  AnyVar Fx = ForceMomentMeasure_Auto.Fx_On_Human;
  AnyVar Fy = ForceMomentMeasure_Auto.Fy_On_Human;
  AnyVar Fz = ForceMomentMeasure_Auto.Fz_On_Human;
  AnyVar Mx = ForceMomentMeasure_Auto.Mx_On_Human;
  AnyVar My = ForceMomentMeasure_Auto.My_On_Human;
  AnyVar Mz = ForceMomentMeasure_Auto.Mz_On_Human;
  
//  
  #if NORMAL_DIRECTION == "X"
  AnyVar Fxx =iffun(gtfun(abs(Fx),0.0), Fx, Fx+1e10);
  AnyVar Rx = 0;
  AnyVar Ry = -Mz/Fxx;
  AnyVar Rz = My/Fxx;  
  AnyVar OnOff = iffun(gtfun(abs(Fx), 10.0), 1.0, 0.0);
  #endif
  
  #if NORMAL_DIRECTION == "Y"
  AnyVar Fyy =iffun(gtfun(abs(Fy),0.0), Fy, Fy+1e10);
  AnyVar Rx = Mz/Fyy;
  AnyVar Ry = 0;
  AnyVar Rz = -Mx/Fyy;
  AnyVar OnOff = iffun(gtfun(abs(Fy), 10.0), 1.0, 0.0);
  #endif    
  
  #if NORMAL_DIRECTION == "Z"
  AnyVar Fzz =iffun(gtfun(abs(Fz),0.0), Fz, Fz+1e10);
  AnyVar Rx = -My/Fzz;
  AnyVar Ry = Mx/Fzz;
  AnyVar Rz = 0;
  //AnySwitch OnOff = iffun(gtfun(abs(Fz), 10.0), 1, 0);
  AnyIntVar OnOff = iffun(gtfun(abs(Fz), 10.0), 1, 0) ;
  #endif
//  
  AnyDrawLine GRF_line=
  {
    AnyRefFrame & ref = .PlateBaseFrame ;
    p0 = { .Rx, .Ry, .Rz};
    p1 = p0 + 0.001 * {.Fx, .Fy, .Fz} ;
    Line.Thickness = 0.01;
    Line.RGB = {1, 0, 0};
    GlobalCoord=Off;
    //Visible = .OnOff_Val;
    Opacity = .OnOff;
  };
  
  AnyDrawSphere GRF_point = 
  {
    AnyRefFrame & ref = .PlateBaseFrame ;
    Position = ref.r + (ref.Axes*{.Rx, .Ry, .Rz}')';
    RGB = {0, 1, 1};
    ScaleXYZ = 0.015*{1, 1, 1};
    GlobalCoord = On;    
    //Visible = .OnOff_Val ;
    Opacity = .OnOff;
  };
//  //<--Code for calculationg COP
};